{"version":3,"sources":["webpack://movie-list/./src/api/movie.js","webpack://movie-list/./src/movie/list/index.js","webpack://movie-list/./src/movie/list/index.module.less?bbc3","webpack://movie-list/./src/movie/pager/index.module.less?10e2","webpack://movie-list/./src/movie/pager/index.js","webpack://movie-list/./src/movie/index.js"],"names":["getMovies","page","size","axios","params","resp","data","container","createMovieTags","movies","result","Array","from","map","item","url","cover","title","rate","join","html","$","addClass","appendTo","createPagers","limit","total","createTag","text","status","targetPage","tagA","styles","on","movieList","movieTotal","empty","pageNumber","Math","ceil","min","floor","maxCount","max","i","init"],"mappings":"8cAEO,SAAeA,EAAtB,oC,iDAAO,WAAyBC,EAAMC,GAA/B,sGACcC,SAAU,cAAe,CAC1CC,OAAQ,CACNH,OACAC,UAJC,cACCG,EADD,yBAOEA,EAAKC,MAPP,4C,kECCHC,E,mBAcG,SAASC,EAAgBC,GAC9B,IAAMC,EAASC,MAAMC,KAAKH,GACvBI,KACC,SAACC,GAAD,kCACOA,EAAKC,IADZ,2CAEQD,EAAKE,MAFb,2BCnBsD,0BDmBtD,aAGyBF,EAAKG,MAH9B,qCCnBuF,wBDmBvF,aAKwBH,EAAKI,KAL7B,qBAOAC,KAAK,IACTZ,EAAUa,KAAKV,GApBfH,EAAYc,IAAE,SAASC,SCPG,yBDOwBC,SAAS,QEP7D,SAAgB,MAAQ,0BAA0B,OAAS,wBAAwB,SAAW,2B,4TCI9F,IAAIhB,EAgBG,SAASiB,EAAavB,EAAMwB,EAAOC,GAQxC,SAASC,EAAUC,EAAMC,EAAQC,GAC/B,IAAMC,EAAOV,IAAE,OACZO,KAAKA,GACLN,SAASU,EAAOH,IAChBN,SAAShB,GACPsB,GAEHE,EAAKE,GAAG,QAAR,2BAAiB,mHAEIjC,EAAU8B,EAAYL,GAF1B,OAIfjB,GAFMH,EAFS,QAIMC,KAAK4B,WAE1BV,EAAaM,EAAYL,EAAOpB,EAAKC,KAAK6B,YAN3B,4CAbrB5B,EAAU6B,QAyBV,IAAMC,EAAaC,KAAKC,KAAKb,EAAQD,GAGrCE,EAAU,KAAe,IAAT1B,EAAa,WAAa,GAAI,GAE9C0B,EAAU,MAAgB,IAAT1B,EAAa,WAAa,GAAIA,EAAO,GAEtD,IACIuC,EAAMF,KAAKG,MAAMxC,EAAOyC,GAC5BF,EAAM,IAAMA,EAAM,GAClB,IAAIG,EAAMH,EAHO,GAGU,EAC3BG,EAAMN,IAAeM,EAAMN,GAC3B,IAAK,IAAIO,EAAIJ,EAAKI,GAAKD,EAAKC,IAC1BjB,EAAUiB,EAAGA,IAAM3C,EAAO,SAAW,GAAI2C,GAG3CjB,EAAU,MAAO1B,IAASoC,EAAa,WAAa,GAAIpC,EAAO,GAE/D0B,EAAU,KAAM1B,IAASoC,EAAa,WAAa,GAAIA,G,6WC3DzD,mHACqBrC,EAAU,EAAG,IADlC,OAEEQ,GADMH,EADR,QAEuBC,KAAK4B,WAC1BV,EAAa,EAAG,GAAInB,EAAKC,KAAK6B,YAHhC,4C,sBDGE5B,EAAYc,IAAE,SAASC,SAASU,SAAcT,SAAS,Q,mCCGzDsB","file":"js/chunk-ac9cd.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport async function getMovies(page, size) {\r\n  const resp = await axios.get(\"/api/movies\", {\r\n    params: {\r\n      page,\r\n      size,\r\n    },\r\n  });\r\n  return resp.data;\r\n}\r\n","import styles from \"./index.module.less\";\r\nimport $ from \"jquery\";\r\n\r\nlet container;\r\n/**\r\n * 初始化函数，负责创建容器\r\n */\r\nfunction init() {\r\n  container = $(\"<div>\").addClass(styles.container).appendTo(\"#app\");\r\n}\r\n\r\ninit();\r\n\r\n/**\r\n * 根据传入的电影数组，创建元素，填充到容器中\r\n * @params movies 电影数组\r\n */\r\nexport function createMovieTags(movies) {\r\n  const result = Array.from(movies)\r\n    .map(\r\n      (item) => `<div>\r\n  <a href=\"${item.url}\" target=\"_blank\">\r\n  <img src=\"${item.cover}\">\r\n  <p class=\"${styles.title}\">${item.title}</p>\r\n  </a>\r\n  <p class=\"${styles.rate}\">${item.rate}</p>\r\n  </div>`\r\n    ).join(\"\");//无join()也行\r\n  container.html(result);\r\n  //由于此处使用JQuery，导致和原生js写法略有不同\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"kOrlLuNtBylKs91raZIOU\",\"title\":\"_3pYTYHeeDH0bFkeCn3ld06\",\"rate\":\"nm_NW-jBa8IeDMNfp4JFo\"};","// extracted by mini-css-extract-plugin\nexport default {\"pager\":\"_1VN1YU2G2lDHkQWRtrceUO\",\"active\":\"kLc696jYNRmHedH9tJqp3\",\"disabled\":\"_2dd1ehDdnLaT1lF72w3i1q\"};","import $ from \"jquery\";\r\nimport styles from \".//index.module.less\";\r\nimport { getMovies } from \"@/api/movie\"; //“@”表示当前目录，即“src”\r\nimport { createMovieTags } from \"../list\";\r\n\r\nlet container;\r\n/**\r\n * 初始化函数，负责创建容器\r\n */\r\nfunction init() {\r\n  container = $(\"<div>\").addClass(styles.pager).appendTo(\"#app\");\r\n}\r\n\r\ninit();\r\n\r\n/**\r\n * 根据传入的页码、页容量、总记录数，创建分页区域的标签\r\n * @params page 页码\r\n * @params limit 页容量（所创建列表内的tag数）\r\n * @params total 总页数 （电影数据元素总数）\r\n */\r\nexport function createPagers(page, limit, total) {\r\n  //清除上次的pager\r\n  container.empty();\r\n  /**\r\n   * 辅助函数，负责帮忙创建一个页码标签\r\n   * @params text 标签的文本\r\n   * @params status 标签的状态，空字符串-普通状态，disabled-禁用状态，active-选中状态\r\n   */\r\n  function createTag(text, status, targetPage) {\r\n    const tagA = $(\"<a>\")\r\n      .text(text)\r\n      .addClass(styles[status]) //key-value概念\r\n      .appendTo(container);\r\n    if (!status) {\r\n      //普通状态时，executed\r\n      tagA.on(\"click\", async function () {\r\n        //1.重新拿取数据\r\n        const resp = await getMovies(targetPage, limit);\r\n        //2.重新生成列表\r\n        createMovieTags(resp.data.movieList);\r\n        //3.重新生成分页区域\r\n        createPagers(targetPage, limit, resp.data.movieTotal);\r\n      });\r\n    }\r\n  }\r\n  \r\n\r\n  const pageNumber = Math.ceil(total / limit); //获取的全部数据所需的最大页码数\r\n\r\n  //1. 创建首页标签\r\n  createTag(\"首页\", page === 1 ? \"disabled\" : \"\", 1);\r\n  //2. 创建上一页标签\r\n  createTag(\"上一页\", page === 1 ? \"disabled\" : \"\", page - 1);\r\n  //3. 创建数字页码标签\r\n  const maxCount = 10; //显示最大页码数\r\n  let min = Math.floor(page - maxCount / 2);\r\n  min < 1 && (min = 1);\r\n  let max = min + maxCount - 1;\r\n  max > pageNumber && (max = pageNumber);\r\n  for (let i = min; i <= max; i++) {\r\n    createTag(i, i === page ? \"active\" : \"\", i);\r\n  }\r\n  //4. 创建下一页标签\r\n  createTag(\"下一页\", page === pageNumber ? \"disabled\" : \"\", page + 1);\r\n  //5. 创建尾页标签\r\n  createTag(\"尾页\", page === pageNumber ? \"disabled\" : \"\", pageNumber);\r\n}\r\n","import { getMovies } from \"../api/movie\";\r\nimport { createMovieTags } from \"./list\";\r\nimport { createPagers } from \"./pager\";\r\n\r\n/**\r\n * 初始化“电影”模块\r\n */\r\nasync function init() {\r\n  const resp = await getMovies(1, 30);\r\n  createMovieTags(resp.data.movieList);//初始化列表\r\n  createPagers(1, 30, resp.data.movieTotal);//初始化分页区域\r\n}\r\n\r\ninit();\r\n"],"sourceRoot":""}